NAME
do nothing on empty input
INPUT
OUTPUT

NAME
delete all objects success
INPUT
new User("I_HATE_YEXT", 13425125123, null, null);
deleteAllObjects(Prims);
y
deleteAllObjects(User);
y
deleteAllObjects(Post);
y
getAllObjects(User);
getAllObjects(Prims);
getAllObjects(Post);
OUTPUT
[]
[]
[]

NAME
delete all objects, are you sure, no
INPUT
new User("I_HATE_YEXT", 13425125123, null, null);
deleteAllObjects(User);
no
getAllObjects(User);
OUTPUT
[
    {
        "username": "I_HATE_YEXT",
        "password": 13425125123,
        "bestFriend": "null",
        "data": "null"
    }
]

NAME
get class names
INPUT
getClassNames()
OUTPUT
[
    "Post",
    "Prims",
    "User"
]

NAME
get description
INPUT
getDesc(Post);
OUTPUT
{
    "content": "String",
    "owner": "User"
}

NAME
get all descriptions
INPUT
getAllDesc()
OUTPUT
{
    "Post": {
        "content": "String",
        "owner": "User"
    },
    "Prims": {
        "s": "String",
        "b": "byte",
        "sh": "short",
        "i": "int",
        "l": "long",
        "f": "float",
        "d": "double",
        "c": "char",
        "boo": "boolean"
    },
    "User": {
        "username": "String",
        "password": "long",
        "bestFriend": "User",
        "data": "Prims"
    }
}

NAME
get local variables
INPUT
String s;
String q = "your mom"
float f = 234.4e14;
Post p;
Post p2 = new Post("this is a post", null);
getLocalVariables();
OUTPUT
{
    "s": "",
    "q": "your mom",
    "f": "2.344E16",
    "p": "null",
    "p2": "Post@#"
}

NAME
get variables null
INPUT
Post thisIsNull
getVariables(thisIsNull);
OUTPUT
getVariables(thisIsNull);
             ^
Error: getVariables() expects non-null parameter

NAME
get variables primitive
INPUT
int thisIsPrim = 44;
getVariables(thisIsPrim);
OUTPUT
getVariables(thisIsPrim);
             ^
Error: getVariables() expects non-primitive parameter

NAME
get variables success on existing variable
INPUT
Post notPrim = new Post("this is a post", null);
getVariables(notPrim);
OUTPUT
{
    "content": "this is a post",
    "owner": "null"
}

NAME
get variables success on new variable
INPUT
getVariables(new Post("this is also a post", null));
OUTPUT
{
    "content": "this is also a post",
    "owner": "null"
}

NAME
delete class
INPUT
deleteClass(Post);
y
getClassNames();
getDesc(Post);
build(Post);
OUTPUT
[
    "Prims",
    "User"
]
getDesc(Post);
        ^
Error: expected class name but found unknown identifier

NAME
get all objects multiple
INPUT
new Post("fence post", null);
new Post("post office", new User("mailman", 13581501231231415, null, null));
new Post("shitpost", null);
getAllObjects(Post);
OUTPUT
[
    {
        "content": "fence post",
        "owner": "null"
    },
    {
        "content": "post office",
        "owner": "User@#"
    },
    {
        "content": "shitpost",
        "owner": "null"
    }
]

NAME
delete class, are you sure, no
INPUT
deleteClass(Post)
no
getDesc(Post);
OUTPUT
{
    "content": "String",
    "owner": "User"
}

NAME
delete class fail on dependency
INPUT
deleteClass(Prims)
OUTPUT
Error: cannot remove class because the following classes have objects of type Prims: User

NAME
rename class variable success
INPUT
Post gonnaRename = new Post("postman", null);
rename(Post.content, "data");
rename(Post.owner, "writer");
gonnaRename.data
gonnaRename.content;
gonnaRename.writer;
getDesc(Post);
rename(Post.data, "content");
rename(Post.writer, "owner");
OUTPUT
"postman"
gonnaRename.content;
            ^
Error: content does not exist in class Post
null
{
    "data": "String",
    "writer": "User"
}

NAME
rename class variable fail on used variable name
INPUT
rename(User.username, "data");
OUTPUT
Error: User already has a variable named data

NAME
rename class variable fail on empty string
INPUT
rename(User.username, "")
OUTPUT
Error: cannot rename variable to empty string

NAME
rename class variable fail on variable does not exist
INPUT
rename(Prims.fakeVar, "real var");
OUTPUT
rename(Prims.fakeVar, "real var");
             ^
Error: fakeVar does not exist in class Prims

NAME
create local variable fail on class name
INPUT
User Prims = new User("primmy", 2e13, null, null);
OUTPUT
User Prims = new User("primmy", 2e13, null, null);
     ^
Error: JavaQL variables may not share names with classes

NAME
create local variable fail on used name
INPUT
String sUsed;
int sUsed = 335;
OUTPUT
int sUsed = 335;
    ^
Error: variable sUsed is already defined

NAME
create local variable success
INPUT
String localSucc;
float localSucc2 = 33e-5;
Post localSucc3 = new Post("Post traumatic stress disorder", null);
OUTPUT

NAME
display local variable success on primitive
INPUT
String displayPrim1;
String displayPrim2 = "display";
byte displayPrim3;
byte displayPrim4 = -35;
short displayPrim5;
short displayPrim6 = 667;
int displayPrim7;
int displayPrim8 = -2100000000;
long displayPrim9;
long displayPrim10 = 42100000000;
char displayPrim11;
char displayPrim12 = 'z';
boolean displayPrim13;
boolean displayPrim14 = true;
float displayPrim15;
float displayPrim16 = -3.24e-1;
double displayPrim17;
double displayPrim18 = 3.5e300;
displayPrim1;
displayPrim2;
displayPrim3;
displayPrim4;
displayPrim5;
displayPrim6;
displayPrim7;
displayPrim8;
displayPrim9;
displayPrim10;
displayPrim11;
displayPrim12;
displayPrim13;
displayPrim14;
displayPrim15;
displayPrim16;
displayPrim17;
displayPrim18;
OUTPUT
""
"display"
0
-35
0
667
0
-2100000000
0
42100000000
''
'z'
false
true
0.0
-0.324
0.0
3.5E300

NAME
reassign without dereference success
INPUT
int reassign1;
reassign1 = 3;
reassign1
User reassign2;
reassign2 = new User("changing this user", 1341250100250102, null, null);
reassign2;
reassign2.bestFriend;
OUTPUT
3
User@#
null

NAME
reassign with dereference success
INPUT
Post reassign3 = new Post("post up", null);
reassign3.content = "posted up";
reassign3.owner = new User("Malcom", 12056870283945012, null, null);
reassign3.content;
reassign3.owner
reassign3.owner.username = "Malc";
reassign3.owner.username;
OUTPUT
"posted up"
User@#
"Malc"

NAME
new object fails on wrong constructor
INPUT
User notAUser = new Post("Post Malone", null);
OUTPUT
User notAUser = new Post("Post Malone", null);
                    ^
Error: expected "User" but found "Post"

NAME
new object fails on bad parameters
INPUT
Post badParam = new Post(334, null);
OUTPUT
Post badParam = new Post(334, null);
                         ^
Error: expected String but found int
Post constructor expects the following parameters: (String content, User owner)

NAME
newsted new statement success
INPUT
Post nesty = new Post("post graduate", new User("Tom Heatwole, PHD", 1743579084573, new User("My number 1 boy", 7072082708, null, null), new Prims("", 0, 0, 0, 0, 0, 0, 'a', false)));
nesty
nesty.owner.bestFriend.username
nesty.owner.data.c
OUTPUT
Post@#
"My number 1 boy"
'a'

NAME
dereference fail when variable does not exist
INPUT
Post noLikes = new Post("postcard", null);
noLikes.likes
new Prims("", 0, 0, 0, 0, 0, noLikes.likes, 'a', false);
OUTPUT
noLikes.likes
        ^
Error: likes does not exist in class Post
new Prims("", 0, 0, 0, 0, 0, noLikes.likes, 'a', false);
                                     ^
Error: likes does not exist in class Post
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)

NAME
dereference success
INPUT
Post derefPost = new Post("Postmates", new User("delivery_driver", 68208680101135, null, null));
derefPost.owner.bestFriend = derefPost.owner;
derefPost.owner.bestFriend.bestFriend.bestFriend.bestFriend.username
OUTPUT
"delivery_driver"

NAME
deference display char and String correctly
INPUT
Prims derefPrims = new Prims("This is a string", 0, 0, 0, 0, 0, 0, 'c', false);
derefPrims.s
derefPrims.c
OUTPUT
"This is a string"
'c'

NAME
parse type success on ids
INPUT
String param1 = "String";
byte param2 = -127;
char param3;
boolean param4 = true; 
new Prims(param1, param2, param2, param2, param2, param2, param2, param3, param4);
User userParam = new User("hacker", 460709345793457, null, null);
new Post("Post request", userParam);
OUTPUT

NAME
parse type fail on ids
INPUT
long longID = 15016801680608708108780
float floatID = 44.4;
Post postID = new Post("Washington Post", null);
new Prims("", longID
new Prims("", floatID
new Post("New York Post", postID);
OUTPUT
new Prims("", longID
              ^
Error: expected byte but found long variable
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", floatID
              ^
Error: expected byte but found float variable
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Post("New York Post", postID);
                          ^
Error: expected User but found Object variable
Post constructor expects the following parameters: (String content, User owner)

NAME
parse type fail without expected type
INPUT
getVariables("show me the variables");
OUTPUT
getVariables("show me the variables");
             ^
Error: unexpected token: "show me the variables"

NAME
parse type fail on literals
INPUT
new Prims('a'
new Prims("", 0, 0, 0, 0, 999999999999999999999999999999999999999999999999, 0, 'a', false);
new Prims("", 0, 0, 0, 0, 0, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 'a', false);
new Prims("", 0, 0, 0, 0, 0, 0, 'a', false);
OUTPUT
new Prims('a'
          ^
Error: expected String but found char
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 0, 0, 0, 0, 999999999999999999999999999999999999999999999999, 0, 'a', false);
                          ^
Error: int literal is too large for type float
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 0, 0, 0, 0, 0, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 'a', false);
                             ^
Error: int literal is too large for type double
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)

