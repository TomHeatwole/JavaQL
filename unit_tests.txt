NAME
do nothing on empty input
INPUT
OUTPUT

NAME
delete all objects success
INPUT
new User("I_HATE_YEXT", 13425125123, null, null);
deleteAllObjects(Prims);
y
deleteAllObjects(User);
y
deleteAllObjects(Post);
y
getAllObjects(User);
getAllObjects(Prims);
getAllObjects(Post);
OUTPUT
User@#
[]
[]
[]

NAME
delete all objects, are you sure, no
INPUT
new User("I_HATE_YEXT", 13425125123, null, null);
deleteAllObjects(User);
no
getAllObjects(User);
OUTPUT
User@#
[
    {
        "username": "I_HATE_YEXT",
        "password": 13425125123,
        "bestFriend": "null",
        "data": "null"
    }
]

NAME
get class names
INPUT
getClassNames()
OUTPUT
[
    "Favorites",
    "Post",
    "Prims",
    "User"
]

NAME
get description
INPUT
getDesc(Post);
OUTPUT
{
    "content": "String",
    "owner": "User"
}

NAME
get all descriptions
INPUT
getAllDesc()
OUTPUT
{
    "Favorites": {
        "posts": "List<Post>",
        "comments": "List<String>",
        "tripleList": "List<List<List<int>>>",
        "triplePrims": "List<List<List<Prims>>>",
        "owner": "User"
    },
    "Post": {
        "content": "String",
        "owner": "User"
    },
    "Prims": {
        "s": "String",
        "b": "byte",
        "sh": "short",
        "i": "int",
        "l": "long",
        "f": "float",
        "d": "double",
        "c": "char",
        "boo": "boolean"
    },
    "User": {
        "username": "String",
        "password": "long",
        "bestFriend": "User",
        "data": "Prims"
    }
}

NAME
get local variables
INPUT
String s;
String q = "your mom"
float f = 234.4e14;
Post p;
Post p2 = new Post("this is a post", null);
getLocalVariables();
OUTPUT
{
    "s": "",
    "q": "your mom",
    "f": "2.344E16",
    "p": "null",
    "p2": "Post@#"
}

NAME
get variables null
INPUT
Post thisIsNull
getVariables(thisIsNull);
OUTPUT
getVariables(thisIsNull);
             ^
Error: getVariables() expects non-null parameter

NAME
get variables primitive
INPUT
int thisIsPrim = 44;
getVariables(thisIsPrim);
OUTPUT
getVariables(thisIsPrim);
             ^
Error: getVariables() expects non-primitive parameter

NAME
get variables success on existing variable
INPUT
Post notPrim = new Post("this is a post", null);
getVariables(notPrim);
OUTPUT
{
    "content": "this is a post",
    "owner": "null"
}

NAME
get variables success on new variable
INPUT
getVariables(new Post("this is also a post", null));
OUTPUT
{
    "content": "this is also a post",
    "owner": "null"
}

NAME
delete class success
INPUT
deleteClass(Favorites);
y
deleteClass(Post);
y
getClassNames();
getDesc(Favorites);
getDesc(Post);
build(Post);
build(Favorites);
OUTPUT
[
    "Prims",
    "User"
]
getDesc(Favorites);
        ^
Error: expected class name but found unknown identifier
getDesc(Post);
        ^
Error: expected class name but found unknown identifier

NAME
get all objects multiple
INPUT
new Post("fence post", null);
new Post("post office", new User("mailman", 13581501231231415, null, null));
new Post("shitpost", null);
getAllObjects(Post);
OUTPUT
Post@#
Post@#
Post@#
[
    {
        "content": "fence post",
        "owner": "null"
    },
    {
        "content": "post office",
        "owner": "User@#"
    },
    {
        "content": "shitpost",
        "owner": "null"
    }
]

NAME
delete class, are you sure, no
INPUT
deleteClass(Favorites)
no
getDesc(Favorites);
OUTPUT
{
    "posts": "List<Post>",
    "comments": "List<String>",
    "tripleList": "List<List<List<int>>>",
    "triplePrims": "List<List<List<Prims>>>",
    "owner": "User"
}

NAME
delete class fail on dependency
INPUT
deleteClass(Prims)
OUTPUT
Error: cannot remove class because the following classes have objects or lists using type Prims: Favorites, User

NAME
rename class variable success
INPUT
Post gonnaRename = new Post("postman", null);
rename(Post.content, "data");
rename(Post.owner, "writer");
gonnaRename.data
gonnaRename.content;
gonnaRename.writer;
getDesc(Post);
rename(Post.data, "content");
rename(Post.writer, "owner");
OUTPUT
"postman"
gonnaRename.content;
            ^
Error: content does not exist in class Post
null
{
    "data": "String",
    "writer": "User"
}

NAME
rename class variable fail on used variable name
INPUT
rename(User.username, "data");
OUTPUT
Error: User already has a variable named data

NAME
rename class variable fail on empty string
INPUT
rename(User.username, "")
OUTPUT
Error: cannot rename variable to empty string

NAME
rename class variable fail on variable does not exist
INPUT
rename(Prims.fakeVar, "real var");
OUTPUT
rename(Prims.fakeVar, "real var");
             ^
Error: fakeVar does not exist in class Prims

NAME
create local variable fail on class name
INPUT
User Prims = new User("primmy", 2e13, null, null);
OUTPUT
User Prims = new User("primmy", 2e13, null, null);
     ^
Error: JavaQL variables may not share names with classes

NAME
create local variable fail on used name
INPUT
String sUsed;
int sUsed = 335;
OUTPUT
int sUsed = 335;
    ^
Error: variable sUsed is already defined

NAME
create local variable success
INPUT
String localSucc;
float localSucc2 = 33e-5;
Post localSucc3 = new Post("Post traumatic stress disorder", null);
OUTPUT

NAME
display local variable success on primitive
INPUT
String displayPrim1;
String displayPrim2 = "display";
byte displayPrim3;
byte displayPrim4 = -35;
short displayPrim5;
short displayPrim6 = 667;
int displayPrim7;
int displayPrim8 = -2100000000;
long displayPrim9;
long displayPrim10 = 42100000000;
char displayPrim11;
char displayPrim12 = 'z';
boolean displayPrim13;
boolean displayPrim14 = true;
float displayPrim15;
float displayPrim16 = -3.24e-1;
double displayPrim17;
double displayPrim18 = 3.5e300;
displayPrim1;
displayPrim2;
displayPrim3;
displayPrim4;
displayPrim5;
displayPrim6;
displayPrim7;
displayPrim8;
displayPrim9;
displayPrim10;
displayPrim11;
displayPrim12;
displayPrim13;
displayPrim14;
displayPrim15;
displayPrim16;
displayPrim17;
displayPrim18;
OUTPUT
""
"display"
0
-35
0
667
0
-2100000000
0
42100000000
''
'z'
false
true
0.0
-0.324
0.0
3.5E300

NAME
reassign without dereference success
INPUT
int reassign1;
reassign1 = 3;
reassign1
User reassign2;
reassign2 = new User("changing this user", 1341250100250102, null, null);
reassign2;
reassign2.bestFriend;
OUTPUT
3
User@#
null

NAME
reassign with dereference success
INPUT
Post reassign3 = new Post("post up", null);
reassign3.content = "posted up";
reassign3.owner = new User("Malcom", 12056870283945012, null, null);
reassign3.content;
reassign3.owner
reassign3.owner.username = "Malc";
reassign3.owner.username;
OUTPUT
"posted up"
User@#
"Malc"

NAME
new object fails on wrong constructor
INPUT
User notAUser = new Post("Post Malone", null);
OUTPUT
Error: cannot convert Post to User

NAME
new object fails on bad parameters
INPUT
Post badParam = new Post(334, null);
OUTPUT
Error: cannot convert int to String
Post constructor expects the following parameters: (String content, User owner)

NAME
nested new statement success
INPUT
Post nesty = new Post("post graduate", new User("Tom Heatwole, PHD", 1743579084573, new User("My number 1 boy", 7072082708, null, null), new Prims("", 0, 0, 0, 0, 0, 0, '\"', false)));
nesty
nesty.owner.bestFriend.username
nesty.owner.data.c
OUTPUT
Post@#
"My number 1 boy"
'"'

NAME
dereference fail when variable does not exist
INPUT
Post noLikes = new Post("postcard", null);
noLikes.likes
new Prims("", 0, 0, 0, 0, 0, noLikes.likes, 'a', false);
OUTPUT
noLikes.likes
        ^
Error: likes does not exist in class Post
new Prims("", 0, 0, 0, 0, 0, noLikes.likes, 'a', false);
                                     ^
Error: likes does not exist in class Post
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)

NAME
dereference success
INPUT
Post derefPost = new Post("Postmates", new User("delivery_driver", 68208680101135, null, null));
derefPost.owner.bestFriend = derefPost.owner;
derefPost.owner.bestFriend.bestFriend.bestFriend.bestFriend.username
OUTPUT
"delivery_driver"

NAME
deference display char and String success 
INPUT
Prims derefPrims = new Prims("This is a string", 0, 0, 0, 0, 0, 0, 'c', false);
derefPrims.s
derefPrims.c
OUTPUT
"This is a string"
'c'

NAME
parse type success on ids
INPUT
String param1 = "String";
byte param2 = -127;
char param3;
boolean param4 = true; 
new Prims(param1, param2, param2, param2, param2, param2, param2, param3, param4);
User userParam = new User("hacker", 460709345793457, null, null);
Post setUserNull = new Post("Post request", userParam);
User nullUser;
setUserNull.owner = nullUser;
OUTPUT
Prims@#

NAME
parse type fail on ids
INPUT
long longID = 150168016806
float floatID = 44.4;
Post postID = new Post("Washington Post", null);
new Prims("", longID
new Prims("", floatID
new Post("New York Post", postID);
OUTPUT
Error: cannot convert long to byte
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
Error: cannot convert float to byte
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
Error: cannot convert Post to User
Post constructor expects the following parameters: (String content, User owner)

NAME
parse type fail without expected type
INPUT
getVariables("show me the variables");
OUTPUT
getVariables("show me the variables");
             ^
Error: unexpected token: "show me the variables"

NAME
parse type fail on literals
INPUT
new Prims('a'
new Prims("", 0, 0, 0, 0, 999999999999999999999999999999999999999999999999, 0, 'a', false);
new Prims("", 0, 0, 0, 0, 0, -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 'a', false);
new Prims("", 128, 0, 0, 0, 0, 0, 'a', false);
new Prims("", 0, 0, -2200000000, 0, 0, 0, 'a', false);
float tooLarge1 = 3.5e900;
float tooLarge2 = -3.5e200;
float tooLarge3 = 3e500;
double tooLarge4 = -3e500000;
long tooLarge5 = 9223372036854775808;
long notTooLarge = -9223372036854775808;
double tooNull = null;
OUTPUT
Error: cannot convert char to String
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 0, 0, 0, 0, 999999999999999999999999999999999999999999999999, 0, 'a', false);
                          ^
Error: int literal is too large for type float
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 0, 0, 0, 0, 0, -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999, 'a', false);
                             ^
Error: int literal is too large for type double
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 128, 0, 0, 0, 0, 0, 'a', false);
              ^
Error: integer value 128 is too large for type byte
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
new Prims("", 0, 0, -2200000000, 0, 0, 0, 'a', false);
                    ^
Error: integer value -2200000000 is too large for type int
Prims constructor expects the following parameters: (String s, byte b, short sh, int i, long l, float f, double d, char c, boolean boo)
float tooLarge1 = 3.5e900;
                  ^
Error: decimal literal is too large
float tooLarge2 = -3.5e200;
                  ^
Error: decimal literal is too large for type float
float tooLarge3 = 3e500;
                  ^
Error: int literal is too large for type float
double tooLarge4 = -3e500000;
                   ^
Error: int literal is too large for type double
long tooLarge5 = 9223372036854775808;
                 ^
Error: integer value 9223372036854775808 is too large for type long
Error: cannot convert "null" to double

NAME
get display value
INPUT
double display1 = -3.5e-300
double display2 = -3e+300
double display3;
boolean display4;
Post display5;
display1
display2
display3
display4
display5
OUTPUT
-3.5E-300
-3.0E300
0.0
false
null

NAME
right paren and semi fail
INPUT
getALlDesc(
getAllDesc(18);
getAllDesc()18;
getAllDesc();18
OUTPUT
getALlDesc(
^
Error: unexpected token: getALlDesc
getAllDesc(18);
           ^
Error: expected ) but found int
getAllDesc()18;
            ^
Error: unexpected token: 18
getAllDesc();18
             ^
Error: unexpected token: 18

NAME
must match unexpected
INPUT
float mustMatch 18.5;
OUTPUT
float mustMatch 18.5;
                ^
Error: unexpected token: 18.5

NAME
lexer skips whitespace
INPUT
        new   Post      ("Post-it note"  , null)    ;          
OUTPUT
Post@#

NAME
lexer ignores inline comment
INPUT
String inline = ""; // this is an inline comment
OUTPUT

NAME
lexer catches invalid strings and chars
INPUT
nothing needs to make sense on this line "let's start a literal
nothing makes sense to test lexer ''
'\z'
'hellow friends'
'
'\
OUTPUT
nothing needs to make sense on this line "let's start a literal
                                         ^
Error: unclosed quotation
nothing makes sense to test lexer ''
                                  ^
Error: empty char literal
'\z'
^
Error: invalid char literal
'hellow friends'
^
Error: invalid char literal
'
^
Error: unclosed char literal
'\
^
Error: unclosed char literal

NAME
lexer fails on underscored identifier
INPUT
String _stringName;
OUTPUT
String _stringName;
       ^
Error: JavaQL identifiers may not begin with an underscore

NAME
lexer fails on unrecognized symbols
INPUT
/z
/@
@
OUTPUT
/z
^
Error: unrecognized symbol: /
/@
^
Error: unrecognized symbol: /
@
^
Error: unrecognized symbol: @

NAME
lexer fails on malformed numbers
INPUT
--4
-4.4.4
3e-4.5
6e
OUTPUT
--4
^
Error: unrecognized symbol: -
-4.4.4
^
Error: malformed number
3e-4.5
^
Error: malformed number
6e
^
Error: malformed number

NAME
local list init fail
INPUT
List<int> badList1 = new List<Post>();
List<Post> badList2 = new List();
List<List<Post>> badList3 = new List<Post>();
List<Post> badList4 = new List<List<Post>>();
OUTPUT
Error: cannot convert List<Post> to List<int>
List<Post> badList2 = new List();
                              ^
Error: expected < but found (
Error: cannot convert List<Post> to List<List<Post>>
Error: cannot convert List<List<Post>> to List<Post>

NAME
local list init success
INPUT
List<int> goodList1;
goodList1;
goodList1 = new List<int>();
goodList1;
List<Post> goodList2 = new List<Post>();
goodList2;
List<List<List<Post>>> goodList3 = new List<List<List<Post>>>();
List<List<char>> goodList4 = new List<List<char>>();
goodList3;
goodList4;
List<List<char>> goodList5 = goodList4;
goodList5;
new List<int>();
OUTPUT
null
List<int>@#
List<Post>@#
List<List<List<Post>>>@#
List<List<char>>@#
List<List<char>>@#
List<int>@#

NAME
clear local variables
INPUT
int clear1 = 19;
byte clear2;
Post clear3;
List<Post> clear4 = new List<Post>();
clearLocalVariables();
getLocalVariables();
clear2
OUTPUT
{}
clear2
^
Error: unexpected token: clear2

NAME
lists as class variables fail
INPUT
Favorites fave1 = new Favorites(null, null, null, null, null);
fave1.posts = new List<int>();
fave1.comments = new List<String>();
List<List<List<int>>> tripleList = new List<List<List<int>>>();
Favorites fave2 = new Favorites(null, null, null, tripleList, null);
Favorites fave3 = new Favorites(null, null, tripleList, new List<List<Prims>>(), null);
OUTPUT
Error: cannot convert List<int> to List<Post>
Error: cannot convert List<List<List<int>>> to List<List<List<Prims>>>
Favorites constructor expects the following parameters: (List<Post> posts, List<String> comments, List<List<List<int>>> tripleList, List<List<List<Prims>>> triplePrims, User owner)
Error: cannot convert List<List<Prims>> to List<List<List<Prims>>>
Favorites constructor expects the following parameters: (List<Post> posts, List<String> comments, List<List<List<int>>> tripleList, List<List<List<Prims>>> triplePrims, User owner)

NAME
lists as class variables success
INPUT
Favorites goodFave = new Favorites(null, null, null, new List<List<List<Prims>>>(), null);
List<Post> nullPostList;
goodFave.posts = nullPostList;
goodFave.comments = new List<String>();
Favorites goodFave2 = new Favorites(null, null, new List<List<List<int>>>(), null, null);
goodFave.tripleList = goodFave2.tripleList;
getVariables(goodFave);
OUTPUT
{
    "posts": "null",
    "comments": "List<String>@#",
    "tripleList": "List<List<List<int>>>@#",
    "triplePrims": "List<List<List<Prims>>>@#",
    "owner": "null"
}

NAME
set reference null on delete
INPUT
User deleteThisUser = new User("fake account", 120150815081231, null, null);
Post postWithNoOwner = new Post("Post-it", deleteThisUser);
deleteAllObjects(User);
y
postWithNoOwner.owner
OUTPUT
null

NAME
dereference new command success
INPUT
new Post("Post mortem", new User("depression", 12512512528, null, new Prims("", 0, 0, 0, 0, 0, 0, 'q', false))).owner.data.c;
String postContent = new Post("postal", null).content;
postContent
OUTPUT
'q'
"postal"

NAME
list add/get/set success
INPUT
List<int> goodList10 = new List<int>();
new List<String>()[] = "this shouldn't produce an error";
new Favorites(null, new List<String>(), null, null, null).comments.add("this somehow should work too");
goodList10.add(35);
goodList10[] = 22;
goodList10.add(-446);
goodList10[2];
goodList10.get(0);
goodList10.set(0, -5);
goodList10[0];
List<List<List<User>>> goodList12 = new List<List<List<User>>>();
goodList12.add(new List<List<User>>());
goodList12.get(0).add(new List<User>());
goodList12[0][0][] = new User("Nesty", -1285191528076130, null, null);
goodList12.get(0)[0].add(goodList12[0][0][0]);
goodList12[0].get(0).get(1).username;
goodList12[0][0][1] = null;
goodList12.get(0).get(0).get(1);
goodList12[0].set(0, null);
goodList12[0][0] = null;
OUTPUT
-446
35
-5
"Nesty"
null

NAME
list add/get/set fail
INPUT
List<int> goodList13 = new List<int>();
goodList13.add("haha");
goodList13[0];
goodList13.get(-6);
goodList13.add(new Prims("", 0, 0, 0, 0, 0, 0, '\"', false).i);
new Favorites(null, new List<String>(), null, null, null).comments[0] = "FAILURE";
new Favorites(null, new List<String>(), null, null, null).comments.get(new Prims("", 0, 0, 0, 0, 0, 0, '\"', false).i);
new List<int>().set(0, 30);
OUTPUT
Error: cannot convert String to int
Error: index 0 out of bounds for length 0
Error: index -6 out of bounds for length 0
Error: index 0 out of bounds for length 0
Error: index 0 out of bounds for length 0
Error: index 0 out of bounds for length 0

NAME
list add/get success with queued bounds check
INPUT
List<String> goodList14 = new List<String>();
goodList14[] = "check this out";
new Favorites(null, goodList14, null, null, null).comments.get(new Prims("", 0, 0, 0, 0, 0, 0, '\"', false).i);
new Favorites(null, goodList14, null, null, null).comments[0];
OUTPUT
"check this out"
"check this out"

NAME
local variables removed on delete class
INPUT
clearLocalVariables();
Favorites deleteMe1;
Favorites deleteMe2 = new Favorites(null, null, null, null, null);
List<List<Favorites>> deleteMe3;
List<Favorites> deleteMe4 = new List<Favorites>();
deleteClass(Favorites);
y
build(Favorites);
getLocalVariables()
OUTPUT
{}

